version: '3.8'

services:
  # API V2 Service
  api-v2:
    build:
      context: ../../../
      dockerfile: ops/docker/dev/dockerfile
    container_name: honeycomb-api-v2-dev
    ports:
      - '8082:8082'
    volumes:
      # Mount source code for hot-reload
      - ../../../src:/app/src
      - ../../../package.json:/app/package.json
      - ../../../tsconfig.json:/app/tsconfig.json
      # Use named volume for node_modules
      - node_modules:/app/node_modules
    env_file:
      - ../../../.env # Load all variables from your local .env file
    environment:
      # Only override what's needed for Docker networking
      DB_HOST: mysql # Override to use Docker container name
      REDIS_HOST: redis # Override to use Docker container name
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - honeycomb-network
    restart: unless-stopped

  # MySQL Database (shared between v1 and v2)
  mysql:
    image: mysql:8.0
    container_name: honeycomb-mysql-dev
    ports:
      - '3306:3306'
    env_file:
      - ../../../.env # Load from your .env file
    environment:
      # MySQL specific mappings
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u',
          'root',
          '-p${DB_PASSWORD}',
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - honeycomb-network
    restart: unless-stopped

  # Redis Cache (shared between v1 and v2)
  redis:
    image: redis:7-alpine
    container_name: honeycomb-redis-dev
    ports:
      - '6379:6379'
    env_file:
      - ../../../.env # Load from your .env file
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - honeycomb-network
    restart: unless-stopped

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: honeycomb-adminer
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: mysql
      ADMINER_DESIGN: pepa-linha
    networks:
      - honeycomb-network
    depends_on:
      - mysql

volumes:
  node_modules:
  mysql_data:
  redis_data:

networks:
  honeycomb-network:
    driver: bridge
    name: honeycomb-dev-network # Named network for potential v1 integration
